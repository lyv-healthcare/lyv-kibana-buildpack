#!/bin/bash

indent() {
  sed -u 's/^/       /'
}

if [ -n "$BUILDPACK_DEBUG" ]; then
    set -x
fi

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
basedir="$( cd -P "$( dirname "$0" )" && pwd )"
STACK="${STACK:-scalingo-20}"

cd $BUILD_DIR

INIT_SCRIPT="$BUILD_DIR/.profile.d/kibana.sh"

if [ -f "$ENV_DIR/ELASTICSEARCH_URL" ]; then
  ELASTICSEARCH_URL=$(cat $ENV_DIR/ELASTICSEARCH_URL)
else
  echo "You need to specify the environment variable ELASTICSEARCH_URL"
  exit 1
fi

if [ -f "$ENV_DIR/DOWNLOAD_URL" ]; then
  DOWNLOAD_URL=$(cat $ENV_DIR/DOWNLOAD_URL)
else
  KIBANA_VERSION=${KIBANA_VERSION:9-0-1}
  DOWNLOAD_URL="https://artifacts.elastic.co/downloads/kibana/kibana-${KIBANA_VERSION}-linux-x86_64.tar.gz"
fi

KIBANA_PACKAGE=${DOWNLOAD_URL##*/}
KIBANA_BASE_DIR=$(basename $KIBANA_PACKAGE .tar.gz)
#KIBANA_RUNTIME_DIR=`echo $KIBANA_BASE_DIR | sed 's/-oss//'`
ES_SSL_VERIFICATION_MODE=${ES_SSL_VERIFICATION_MODE:-full}

case ${KIBANA_PACKAGE} in
  *.tar.gz)
    KIBANA_DIR="$BUILD_DIR/${KIBANA_PACKAGE%%.tar.gz}"
    #KIBANA_DIR=`echo $KIBANA_DIR | sed 's/\-oss//'`
    tar="tar xz"
    ;;
  *)
    echo "Only tar.gz is supported: $KIBANA_PACKAGE" | indent
    exit 1
    ;;
esac


eval $(echo $ELASTICSEARCH_URL | sed -r 's/(https?:\/\/)((.*):(.*)@){0,1}(.*)/ELASTICSEARCH_URL=\1\5 \nELASTICSEARCH_USER=\3 \nELASTICSEARCH_PASSWORD=\4/')

mkdir="mkdir -p"
download="curl -sLO"
extract="$tar -C $BUILD_DIR --wildcards -f"
verify="sha512sum --check --warn -"
configure_url='sed -i -r s/\#(elasticsearch.hosts:\x20).{1,}/\1["'$(echo $ELASTICSEARCH_URL | sed 's/\//\\\//g')'"]/'
configure_host='sed -i -r s/\#(server.host:\x20).{1,}/\1"0.0.0.0"/'
configure_user='sed -i -r s/\#(elasticsearch.username:\x20).{1,}/\1"'$ELASTICSEARCH_USER'"/'
configure_password='sed -i -r s/\#(elasticsearch.password:\x20).{1,}/\1"'$ELASTICSEARCH_PASSWORD'"/'
configure_ssl_verify='sed -i -r s/\#(elasticsearch.ssl.verificationMode:\x20).{1,}/\1"'$ES_SSL_VERIFICATION_MODE'"/'
configure_log_level='sed -i -r s/\#(logger.root.level:\x20).{1,}/\1"'$LOG_LEVEL'"/'


echo "-----> Installing Kibana..."

$mkdir ${INIT_SCRIPT%/*}
$mkdir $CACHE_DIR

if [ ! -f "$CACHE_DIR/$KIBANA_PACKAGE" ]; then
  echo "downloading $DOWNLOAD_URL" | indent
  $download $DOWNLOAD_URL

  echo "verifying against ${DOWNLOAD_URL}.sha512" | indent
  $download "${DOWNLOAD_URL}.sha512"

  sha512sum $KIBANA_PACKAGE.sha512
  if [ $? -eq 0 ]; then
    mv $KIBANA_PACKAGE $CACHE_DIR
  else
    exit 1
  fi
fi

$extract $CACHE_DIR/$KIBANA_PACKAGE

echo "-----> Configuring host"
$configure_host $KIBANA_DIR/config/kibana.yml
echo "-----> Configuring ELASTICSEARCH_URL"
$configure_url $KIBANA_DIR/config/kibana.yml

if [[ -n "$ELASTICSEARCH_USER" && -n "$ELASTICSEARCH_PASSWORD" ]] ; then
  echo "-----> Configuring Elasticsearch credentials"
  $configure_user $KIBANA_DIR/config/kibana.yml
  $configure_password $KIBANA_DIR/config/kibana.yml
fi

if [[ -n "$LOG_LEVEL" ]] ; then
  echo "-----> Configuring Kibana log level to '$LOG_LEVEL'"
  $configure_log_level $KIBANA_DIR/config/kibana.yml
fi

cd $KIBANA_DIR
echo "-----> Remove the x-pack plugin"
./bin/kibana-plugin remove "x-pack" | indent

$configure_ssl_verify $KIBANA_DIR/config/kibana.yml

if [ -f "$BUILD_DIR/kibana-plugins" ] ; then
  echo "-----> 'kibana-plugins' file detected"
    cat "${BUILD_DIR}/kibana-plugins" | while read plugin ; do
      echo "       Installing Kibana plugin '${plugin}'"
      ./bin/kibana-plugin install "${plugin}" | indent
    done
fi
cd $BUILD_DIR

if [ -f "$BUILD_DIR/plugins-config" ] ; then
  echo "-----> 'plugins-config' file detected"
  cat "${BUILD_DIR}/plugins-config" | while read config ; do
    localfile=$(echo $config | cut -d ':' -f 1)
    remotefile=$(echo $config | cut -d ':' -f 2)
    echo "       Applying configuration '${localfile}'"
    cp $localfile "${KIBANA_DIR}/plugins/${remotefile}"
  done
fi

echo "-----> Installing reverse proxy for authentication"
$mkdir "${BUILD_DIR}/vendor/nginx"

NGINX_VENDOR_BASE_URL="${NGINX_VENDOR_URL:-https://nginx-buildpack.s3.amazonaws.com}"
NGINX_VENDOR_URL="${NGINX_VENDOR_BASE_URL}/${STACK}"
SEMVER_SERVER="https://semver.scalingo.com"
DEFAULT_NGINX=$(curl --fail --location --silent "${SEMVER_SERVER}/nginx-${STACK}")
NGINX_VERSION=${NGINX_VERSION:-$DEFAULT_NGINX}
NGINX_URL="$NGINX_VENDOR_URL/package/nginx-$NGINX_VERSION.tgz"

curl --fail --retry 3 --retry-delay 2 --connect-timeout 3 --max-time 30 -s "$NGINX_URL" | tar -C "$BUILD_DIR/vendor/nginx" -xzf -

mv "${KIBANA_DIR}/bin/kibana" "${KIBANA_DIR}/bin/kibana.orig"
cp "$basedir/../conf/nginx.conf.erb" "$BUILD_DIR/vendor/nginx/conf/nginx.conf.erb"

  cat > "$BUILD_DIR/.profile.d/nginx.sh" <<SH
export PATH=/app/vendor/nginx/sbin:\$PATH
SH

  cat > "$KIBANA_DIR/bin/kibana" <<SH
#!/usr/bin/env bash

basedir="\$( cd -P "\$(dirname \$(dirname \$(dirname "\$0" )))" && pwd )"
pmsgr=/tmp/pmsgr
rm -f \$pmsgr
mkfifo \$pmsgr


eval \$(echo \$ELASTICSEARCH_URL | sed -r 's/(https?:\/\/)((.*):(.*)@){0,1}(.*)/ELASTICSEARCH_URL=\1\5 \nELASTICSEARCH_USER=\3 \nELASTICSEARCH_PASSWORD=\4/')

if [[ -n "\$ELASTICSEARCH_USER" && -n "\$ELASTICSEARCH_PASSWORD" ]] ; then
  export ELASTICSEARCH_AUTH=\$(echo -n \$ELASTICSEARCH_USER:\$ELASTICSEARCH_PASSWORD | base64 --wrap=0)
fi

if [ -n "\$KIBANA_USER" -a -n "\$KIBANA_PASSWORD" ] ; then
  printf "\$KIBANA_USER:\$(openssl passwd -1 -salt \$(openssl rand -base64 6) \$KIBANA_PASSWORD)" > \$basedir/.kibana-password
fi

erb "\$basedir/vendor/nginx/conf/nginx.conf.erb" > "\$basedir/vendor/nginx/conf/nginx.conf"

(
    nginx -p "\$basedir/vendor/nginx" -c "\$basedir/vendor/nginx/conf/nginx.conf"
    echo "nginx" > \$pmsgr
) &

if [ -n "\$ELASTICSEARCH_TLS_CA_URL" ] ; then
  echo "-----> Downloading Elasticsearch CA Certificate"
  curl -L -s "\$ELASTICSEARCH_TLS_CA_URL" -o /app/ca.crt
  echo "elasticsearch.ssl.certificateAuthorities: [ \"/app/ca.crt\" ]" >> $KIBANA_RUNTIME_DIR/config/kibana.yml
elif [ -n "\$ELASTICSEARCH_TLS_CA_PATH" ] ; then
  echo "-----> Configuring Elasticsearch CA Certificate"
  echo "elasticsearch.ssl.certificateAuthorities: [ \"/app/\$ELASTICSEARCH_TLS_CA_PATH}\" ]" >> $KIBANA_RUNTIME_DIR/config/kibana.yml
fi

(
    "\$basedir/${KIBANA_RUNTIME_DIR}/bin/kibana.orig" --port 8000
    echo "kibana" > \$pmsgr
) &

read exitproc <\$pmsgr
echo "Boot failed: \$exitproc"
exit 1
SH

chmod +x "${KIBANA_DIR}/bin/kibana"

echo "Exporting PATH" | indent

cat <<EOF > $INIT_SCRIPT
export PATH="$PATH:${KIBANA_RUNTIME_DIR##*/}/bin"
export NODE_OPTIONS="${NODE_OPTIONS:-"--max-old-space-size=512"}"
EOF
